{"version":3,"sources":["serviceWorker.js","components/Forms/SignUp.js","components/Forms/LogIn.js","components/Forms/AddTodo.js","components/Forms/Search.js","components/Forms/UpdateTodoText.js","components/Loading.js","utils/timeDifference.js","components/Home/Todos/Todo.js","components/Home/Todos/Todos.js","components/Filter.js","components/Home/Home.js","components/Welcome/Welcome.js","components/Confirmation.js","components/Header/Header.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","SignUp","state","data","email","password","formErrors","componentDidUpdate","_this","props","signUp","error","setState","onChange","e","_e$target","target","name","value","_ref","Object","objectSpread","defineProperty","onSubmit","_callee","regenerator_default","a","wrap","_context","prev","next","preventDefault","validate","keys","length","variables","stop","this","_ref3","isEmail","_this$state","loading","react_default","createElement","reactstrap_es","style","height","className","xs","sm","lg","htmlFor","type","id","disabled","color","Component","defaultProps","LogIn","_this$props","logIn","fetchUser","_ref3$data$logIn","token","sent","_ref4","_this2","_this$props2","viewerFetching","inline","server","for","placeholder","bsSize","size","AddTodo","text","submit","trim","Search","clearText","search","UpdateTodoTextInput","componentDidMount","handleIsEditing","_id","textProp","updateTodoText","onBlur","override","css","_templateObject","Loading","react_spinners","sizeUnit","timeDifferenceForDate","date","current","previous","elapsed","milliSecondsPerMinute","concat","Math","round","milliSecondsPerHour","milliSecondsPerDay","timeDifference","Date","getTime","UPDATE_TODO_TEXT","gql","Todo_templateObject","DELETE_TODO","_templateObject2","TOGGLE_COMPLETE","_templateObject3","Todo","isEditing","subscribeToTodoUpdatedText","_this$props$todo","todo","complete","createdAt","updatedAt","react_apollo_browser_umd","client","viewer","readQuery","query","VIEWER","sort","CLIENT","removeTodo","writeQuery","__typename","todos","filter","t","todosCount","md","mutation","toggleComplete","asyncToGenerator","mark","writeFragment","fragment","_templateObject4","toISOString","input","_ids","console","log","checked","mutate","UpdateTodoText","optimisticResponse","onDoubleClick","textDecoration","cursor","deleteClient","react_icons_kit","onClick","_callee2","_deleteClient$readQue","deleteViewer","_deleteClient$readQue2","deletePage","deleteSort","_context2","writeData","showRefresh","page","todosRefetching","fetchPolicy","icon","remove","borderTop","fragments","_templateObject5","TODO_UPDATED_TEXT_SUBSCRIPTION","Todos_templateObject","Todos","subscribeToNewTodos","_ref$data","_ref2","refetch","subscribeToMore","load","Fragment","minHeight","components_Loading","map","Todos_Todo","key","document","updateQuery","subscriptionData","updatedTodoText","todoUpdatedText","toConsumableArray","Pagination_default","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","_ref5","currentPage","_x","apply","arguments","React","CLEAR_COMPLETED","Filter_templateObject","Filter","getIdsByComplete","bool","allCompleted","every","c","updateFragment","_ref7","_ref6","forEach","Filter_templateObject2","completedIds","inCompleteIds","newPage","_callee3","_context3","_callee4","_context4","_callee5","_context5","clearCompleted","_callee6","_context6","_ref13","includes","ADD_TODO","Home_templateObject","Home_templateObject2","TODO_ADDED_SUBSCRIPTION","Home_templateObject3","Home","confirmed","Forms_AddTodo","now","uuidv1","mockTodo","addTodo","update","proxy","Forms_Search","components_Filter","Home_Todos_Todos","newTodo","todoAdded","SIGNUP_USER","Welcome_templateObject","SIGN_UP_SUCCESS","Welcome_templateObject2","Welcome","success","isOpen","toggle","onCompleted","attr","undefined","Forms_SignUp","assign","Confirmation","LOGIN_USER","Header_templateObject","Header","borderBottom","light","expand","href","navbar","react","localStorage","clear","_ref3$logIn","setItem","context","headers","authorization","_x2","Forms_LogIn","App_templateObject","App","components_Header_Header","es","primary","component","Home_Home","path","Welcome_Welcome","components_Confirmation","getItem","cache","InMemoryCache","dataIdFromObject","object","defaultDataIdFromObject","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","connectionParams","link","split","_getMainDefinition","getMainDefinition","kind","operation","ApolloClient","initializers","isLoggedIn","currentUser","pagination","ReactDOM","render","src_App","width","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ce82537.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  CardHeader,\n  CardBody,\n  Button,\n} from 'reactstrap'\nimport isEmail from 'validator/lib/isEmail'\n\nclass SignUp extends Component {\n\n  state = {\n    data: {\n      email: \"\",\n      password: \"\"\n    },\n    formErrors: {},\n  };\n\n  componentDidUpdate = () => {\n    const { data } = this.props\n    if (data && data.signUp.error) {\n      const { formErrors } = this.state\n      if (formErrors.email !== data.signUp.error) {\n        this.setState({ formErrors: { email: data.signUp.error } })\n      }\n    }\n  }\n\n  onChange = e => {\n    const { name, value } = e.target\n    this.setState(({ data }) => ({\n      data: { ...data, [name]: value }\n    }));\n  }\n\n  onSubmit = async (e) => {\n    e.preventDefault();\n    const { data } = this.state\n    const formErrors = this.validate(data);\n    this.setState({ formErrors })\n    if (Object.keys(formErrors).length === 0) {\n      const { signUp } = this.props\n      signUp({ variables: { ...data } });\n    }\n  };\n\n  validate = ({ email, password }) => {\n    const formErrors = {};\n    if (!isEmail(email)) {\n      formErrors.email = \"Invalid email\";\n    }\n    if (!password) {\n      formErrors.password = \"Can't be blank\";\n    }\n    return formErrors;\n  };\n\n  render() {\n    const { data, formErrors } = this.state;\n    const { loading } = this.props\n    return (\n      <Container style={{ height: 'calc(100vh - 72px)' }}>\n        <Row className=\"align-items-center justify-content-center\" style={{ height: \"inherit\" }}>\n          <Col xs=\"12\" sm=\"8\" lg=\"6\">\n            <Card>\n              <CardHeader>\n                <h4 className=\"mb-0\">\n                  Join the Club!\n                </h4>\n              </CardHeader>\n              <CardBody>\n                <form onSubmit={this.onSubmit}>\n                  <div className=\"form-group\">\n                    <label className=\"form-label w-100\" htmlFor=\"email\">\n                      Email\n                      <input\n                        type=\"email\"\n                        id=\"email\"\n                        name=\"email\"\n                        value={data.email}\n                        onChange={this.onChange}\n                        className={\n                          formErrors.email ? \"form-control is-invalid\" : \"form-control\"\n                        }\n                      />\n                      <div className=\"invalid-feedback\">{formErrors.email}</div>\n                    </label>\n                  </div>\n                  <div className=\"form-group\">\n                    <label className=\"form-label w-100\" htmlFor=\"password\">\n                      Password\n                      <input\n                        type=\"password\"\n                        id=\"password\"\n                        name=\"password\"\n                        value={data.password}\n                        onChange={this.onChange}\n                        className={\n                          formErrors.password ? \"form-control is-invalid\" : \"form-control\"\n                        }\n                      />\n                      <div className=\"invalid-feedback\">{formErrors.password}</div>\n                    </label>\n                  </div>\n                  <Button\n                    disabled={loading}\n                    type=\"submit\"\n                    color=\"primary\"\n                    className=\"btn-block\"\n                  >\n                    Sign Up\n                  </Button>\n                </form>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nSignUp.defaultProps = {\n  data: {\n    signUp: {\n      error: null\n    }\n  }\n}\n\nSignUp.propTypes = {\n  data: PropTypes.shape({\n    signUp: PropTypes.shape({\n      error: PropTypes.string,\n    }).isRequired,\n  }),\n  signUp: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n}\n\nexport default SignUp\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n} from 'reactstrap'\nimport isEmail from 'validator/lib/isEmail'\n\nclass LogIn extends Component {\n\n  state = {\n    data: {\n      email: \"\",\n      password: \"\"\n    },\n    formErrors: {},\n  };\n\n  onChange = e => {\n    const { name, value } = e.target\n    this.setState(({ data }) => ({\n      data: { ...data, [name]: value }\n    }));\n  }\n\n  onSubmit = async (e) => {\n    e.preventDefault();\n    const { data } = this.state\n    const formErrors = this.validate(data);\n    this.setState({ formErrors })\n    if (Object.keys(formErrors).length === 0) {\n      const { logIn, fetchUser } = this.props\n      const { data: { logIn: { token, error } } } = await logIn({\n        variables: { ...data },\n      });\n      if (error) {\n        this.setState({ formErrors: { email: error.email, password: error.password } })\n      }\n      if (token) {\n        await fetchUser(token)\n      }\n    }\n  };\n\n  validate = ({ email, password }) => {\n    const formErrors = {};\n    if (!isEmail(email)) {\n      formErrors.email = \"Invalid email\";\n    }\n    if (!password) {\n      formErrors.password = \"Can't be blank\";\n    }\n    return formErrors;\n  };\n\n  render() {\n    const { data, formErrors } = this.state;\n    const { loading, viewerFetching } = this.props\n    return (\n      <Form\n        className=\"header-login-form align-items-start\"\n        inline\n        onSubmit={e => {\n          this.onSubmit(e)\n        }}\n      >\n        {formErrors.server && (\n          <div className=\"alert alert-danger\">{formErrors.server}</div>\n        )}\n        <FormGroup className=\"header-email-container mr-sm-2 mb-0\">\n          <Label for=\"exampleEmail\" className=\"mr-sm-2 align-self-start\">Email</Label>\n          <div className=\"d-flex flex-column\">\n            <Input\n              type=\"email\"\n              name=\"email\"\n              id=\"exampleEmail\"\n              placeholder=\"something@idk.cool\"\n              bsSize=\"sm\"\n              value={data.email}\n              onChange={this.onChange}\n              className={\n                formErrors.email ? \"form-control is-invalid\" : \"form-control\"\n              }\n            />\n            <div className=\"invalid-feedback w-auto\">{formErrors.email}</div>\n          </div>\n        </FormGroup>\n        <FormGroup className=\"header-password-container mr-sm-2 mb-0\">\n          <Label for=\"examplePassword\" className=\"mr-sm-2 align-self-start\">Password</Label>\n          <div className=\"d-flex flex-column\">\n            <Input\n              type=\"password\"\n              name=\"password\"\n              id=\"examplePassword\"\n              placeholder=\"don't tell!\"\n              bsSize=\"sm\"\n              value={data.password}\n              onChange={this.onChange}\n              className={\n                formErrors.password ? \"form-control is-invalid\" : \"form-control\"\n              }\n            />\n            <div className=\"invalid-feedback w-auto\">{formErrors.password}</div>\n          </div>\n        </FormGroup>\n        <Button\n          disabled={viewerFetching || loading}\n          className=\"header-login-button\"\n          color=\"primary\"\n          size=\"sm\"\n        >\n          Log In\n        </Button>\n      </Form>\n    )\n  }\n}\n\nLogIn.defaultProps = {\n  data: {\n    logIn: {\n      error: {\n        email: null,\n        password: null\n      }\n    }\n  }\n}\n\nLogIn.propTypes = {\n  data: PropTypes.shape({\n    logIn: PropTypes.shape({\n      error: PropTypes.shape({\n        email: PropTypes.string,\n        password: PropTypes.string,\n      }),\n    }).isRequired,\n  }),\n  viewerFetching: PropTypes.bool.isRequired,\n  logIn: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n}\n\nexport default LogIn","import React, { Component } from 'react'\nimport { Form, Input } from 'reactstrap'\nimport PropTypes from 'prop-types'\n\nclass AddTodo extends Component {\n\n  state = {\n    text: '',\n    loading: false\n  }\n\n  onChange = e => {\n    const { name, value } = e.target\n    this.setState({\n      [name]: value\n    });\n  }\n\n  onSubmit = async (e) => {\n    e.preventDefault()\n    this.setState({ loading: true })\n    const { submit } = this.props\n    const { text } = this.state\n    if(text){\n      await submit({ text:text.trim() })\n      this.setState({ text: '', loading: false });\n    }\n  };\n\n  render() {\n    const { text, loading } = this.state\n    return (\n      <Form\n        className=\"\n        form-inline\n        justify-content-center\n        mx-auto\n        mt-4\n        mb-xs-1\n        mb-md-5\n        align-items-start\n        \"\n        onSubmit={this.onSubmit}\n      >\n        <Input\n          type=\"text\"\n          id=\"text\"\n          name=\"text\"\n          value={text}\n          placeholder=\"Add Todo\"\n          disabled={loading}\n          onChange={this.onChange}\n          className=\"form-control w-75\"\n        />\n      </Form>\n    )\n  }\n}\n\nAddTodo.propTypes = {\n  submit: PropTypes.func.isRequired,\n}\n\nexport default AddTodo","import React, { Component } from 'react'\nimport { Input, Form } from 'reactstrap'\nimport PropTypes from 'prop-types'\n\nclass Search extends Component {\n  \n  state = {\n    text: ''\n  }\n\n  onChange = e => {\n    const { clearText } = this.props\n    this.setState({ text: e.target.value.trim() })\n    clearText()\n  }\n\n  onSubmit = async (e) => {\n    e.preventDefault()\n    const { text } = this.state\n    const { search }  = this.props\n    if(text) {\n      await search({ text })\n    }\n  }\n\n\n  render() {\n    const { text} = this.state\n    return (\n      <Form\n        className=\"\n          form-inline\n          justify-content-center\n          mx-auto\n          mt-4\n          mb-xs-1\n          mb-md-5\n          align-items-start\n        \"\n        onSubmit={this.onSubmit}\n      >\n      <Input\n        placeholder=\"Search your todos\"\n        value={text}\n        className=\"form-control w-75\"\n        onChange={this.onChange}\n      />\n    </Form>\n    )\n  }\n}\n\nSearch.propTypes = {\n  clearText: PropTypes.func.isRequired,\n}\n\nexport default Search","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Form, Input } from 'reactstrap'\n\nclass UpdateTodoTextInput extends Component {\n\n  state = {\n    text: ''\n  };\n\n  componentDidMount = () => {\n    const { text } = this.props\n    this.setState({ text })\n  }\n\n  onSubmit = e => {\n    e.preventDefault()\n    const { text } = this.state\n    const {\n      handleIsEditing,\n      _id,\n      text: textProp,\n      updateTodoText\n    } = this.props\n    if (text && text !== textProp) {\n      updateTodoText({ _id, text })\n    } else {\n      this.setState({ text: textProp })\n    }\n    handleIsEditing()\n  }\n\n  onChange = e => {\n    const { value } = e.target\n    this.setState({\n      text: value\n    });\n  }\n\n  render() {\n    const { text } = this.state\n    return (\n      <Form onSubmit={this.onSubmit}>\n        <Input\n          type=\"text\"\n          value={text}\n          onChange={this.onChange}\n          onBlur={this.onSubmit}\n        />\n      </Form>\n    )\n  }\n}\n\nUpdateTodoTextInput.propTypes = {\n  handleIsEditing: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired,\n  _id: PropTypes.string.isRequired,\n  updateTodoText: PropTypes.func.isRequired,\n}\n\n\nexport default UpdateTodoTextInput\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { ClipLoader } from 'react-spinners'\nimport { css } from 'emotion'\n\nconst override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: red;\n`;\n\nconst Loading = ({ loading }) => (\n  <div className=\"loading-container\">\n    <ClipLoader\n      className={override}\n      sizeUnit=\"px\"\n      size={100}\n      color='#123abc'\n      loading={loading}\n    />\n  </div>\n)\n\nLoading.propTypes = {\n  loading: PropTypes.bool.isRequired,\n}\n\nexport default Loading\n\n","function timeDifference(current, previous) {\n\n  const milliSecondsPerMinute = 60 * 1000\n  const milliSecondsPerHour = milliSecondsPerMinute * 60\n  const milliSecondsPerDay = milliSecondsPerHour * 24\n  const milliSecondsPerMonth = milliSecondsPerDay * 30\n  const milliSecondsPerYear = milliSecondsPerDay * 365\n\n  const elapsed = current - previous\n\n  if (elapsed < milliSecondsPerMinute / 3) {\n    return 'just now'\n  }\n\n  if (elapsed < milliSecondsPerMinute) {\n    return 'less than 1 min ago'\n  }\n\n  if (elapsed < milliSecondsPerHour) {\n    return `${Math.round(elapsed / milliSecondsPerMinute)  } min ago`\n  }\n\n  if (elapsed < milliSecondsPerDay) {\n    return `${Math.round(elapsed / milliSecondsPerHour)  } h ago`\n  }\n\n  if (elapsed < milliSecondsPerMonth) {\n    return `${Math.round(elapsed / milliSecondsPerDay)  } days ago`\n  }\n\n  if (elapsed < milliSecondsPerYear) {\n    return `${Math.round(elapsed / milliSecondsPerMonth)  } mo ago`\n  }\n\n  return `${Math.round(elapsed / milliSecondsPerYear)  } years ago`\n}\n\nexport function timeDifferenceForDate(date) {\n  const now = new Date().getTime()\n  const updated = new Date(date).getTime()\n  return timeDifference(now, updated)\n}","import React, { Component } from 'react'\nimport { Mutation, ApolloConsumer } from 'react-apollo'\nimport gql from 'graphql-tag'\nimport {\n  Col,\n  Card,\n  CardBody,\n  CardTitle,\n  CardText,\n  Input\n} from 'reactstrap'\nimport PropTypes from 'prop-types'\nimport { Icon } from 'react-icons-kit'\nimport { remove } from 'react-icons-kit/fa/remove'\n\nimport { UpdateTodoText } from '../../Forms'\nimport { timeDifferenceForDate } from '../../../utils/timeDifference'\n\nimport { VIEWER } from '../../../App'\nimport { CLIENT } from '../Home'\n\nconst UPDATE_TODO_TEXT = gql`\n  mutation UpdateTodoText($input: UpdateTodoTextInput!) {\n    __typename\n    updateTodoText(input: $input) {\n      __typename\n      todo {\n        __typename\n        _id\n        updatedAt\n        text\n      }\n    }\n  }\n`;\n\nconst DELETE_TODO = gql`\n  mutation DeleteTodo($input: DeleteTodoInput!) {\n    deleteTodo(input: $input) {\n      __typename\n      _id # the deleted _id\n    }\n  }\n`;\n\nexport const TOGGLE_COMPLETE = gql`\n  mutation ToggleComplete($input: ToggleCompleteInput!) {\n    toggleComplete(input: $input) {\n      __typename\n      toggledIds # the deleted _id\n    }\n  }\n`;\n\nclass Todo extends Component {\n\n  state = {\n    isEditing: false,\n  }\n\n  componentDidMount = () => {\n    const { subscribeToTodoUpdatedText } = this.props\n    subscribeToTodoUpdatedText()\n  }\n\n  handleIsEditing = () => {\n    this.setState(({ isEditing }) => ({\n      isEditing: !isEditing\n    }))\n  }\n\n  render() {\n    const { isEditing } = this.state\n    const { todo: { _id, complete, createdAt, updatedAt, text } } = this.props\n    return (\n      <ApolloConsumer>\n        {client => {\n          const { viewer } = client.readQuery({ query: VIEWER })\n          const { sort } = client.readQuery({ query: CLIENT })\n          const removeTodo = () => {\n            client.writeQuery({\n              query: VIEWER,\n              data: {\n                __typename: 'Query',\n                viewer: {\n                  __typename: 'User',\n                  ...viewer,\n                  todos: viewer.todos.filter(t => t._id !== _id),\n                  todosCount: viewer.todosCount - 1\n                },\n              }\n            })\n          }\n          return (\n            <Col lg=\"4\" md=\"6\" sm=\"12\">\n              <Card className=\"mx-auto mt-4 w-75 p-3\">\n                <CardBody>\n                  <CardTitle className=\"d-flex align-items-center justify-content-between\">\n                    <Mutation mutation={TOGGLE_COMPLETE}>\n                      {toggleComplete => (\n                        <Input\n                          onChange={async () => {\n                            client.writeFragment({ // we render todos on Todos component from client readQuery\n                              id: _id,\n                              fragment: gql`\n                                fragment ToggleCompleteFragment on Todo {\n                                  __typename\n                                  _id\n                                  complete\n                                  updatedAt\n                                }\n                              `,\n                              data: {\n                                __typename: 'Todo',\n                                _id,\n                                complete: !complete,\n                                updatedAt: new Date().toISOString(),\n                              },\n                            });\n                            await toggleComplete({\n                              variables: {\n                                input: {\n                                  _ids: [_id], // pass as an array because we can use this mutation for multiple todos\n                                  complete: !complete // the opposite value of boolean will be set to the selected todo\n                                }\n                              }\n                            })\n                            if (sort !== 'all') {\n                              console.log('sort', sort)\n                              console.log('remove todo!')\n                              removeTodo()\n                            }\n                          }}\n                          checked={complete}\n                          type=\"checkbox\"\n                        />\n                      )}\n                    </Mutation>\n                    {isEditing ? (\n                      <Mutation mutation={UPDATE_TODO_TEXT}>\n                        {mutate => (\n                          <UpdateTodoText\n                            _id={_id}\n                            text={text}\n                            handleIsEditing={this.handleIsEditing}\n                            updateTodoText={input =>\n                              mutate({\n                                variables: { input: { ...input } },\n                                optimisticResponse: {\n                                  __typename: \"Mutation\",\n                                  updateTodoText: {\n                                    __typename: \"UpdateTodoTextResponse\",\n                                    todo: {\n                                      __typename: \"Todo\",\n                                      _id,\n                                      text: input.text,\n                                      updatedAt: new Date().toISOString(),\n                                    }\n                                  }\n                                }\n                              })\n                            }\n                          />\n                        )}\n                      </Mutation>\n                    ) : (\n                        <div\n                          onDoubleClick={this.handleIsEditing}\n                          style={{\n                            textDecoration: complete ? 'line-through' : 'none',\n                            cursor: 'pointer'\n                          }}\n                          className=\"mx-auto\"\n                        >\n                          {text}\n                        </div>\n                      )}\n                    <Mutation\n                      mutation={DELETE_TODO}>\n                      {(mutate, { client: deleteClient }) => (\n                        <Icon\n                          onClick={async () => {\n                            removeTodo()\n                            if (viewer.todosCount > 9) {\n                              client.writeData({ data: { showRefresh: true } })\n                            }\n                            await mutate({\n                              variables: { input: { _id } },\n                            })\n                            const {\n                              viewer: deleteViewer,\n                            } = deleteClient.readQuery({ query: VIEWER })\n                            const {\n                              page: deletePage,\n                              sort: deleteSort\n                            } = deleteClient.readQuery({ query: CLIENT })\n                            if (!deleteViewer.todos.length && viewer.todosCount > 1) {\n                              deleteClient.writeData({ data: { todosRefetching: true } })\n                              await deleteClient.query({\n                                query: VIEWER,\n                                variables: { page: deletePage, sort: deleteSort },\n                                fetchPolicy: 'network-only'\n                              })\n                              deleteClient.writeData({\n                                data: {\n                                  todosRefetching: false,\n                                  showRefresh: false\n                                }\n                              })\n                            }\n                          }}\n                          style={{\n                            color: 'red',\n                            cursor: 'pointer'\n                          }}\n                          icon={remove}\n                        />\n                      )}\n                    </Mutation>\n                  </CardTitle>\n                  <CardText\n                    className=\"mt-2 text-center\"\n                    style={{ borderTop: 'solid black 1px' }}\n                  >\n                    {createdAt === updatedAt ?\n                      `Added ${timeDifferenceForDate(createdAt)}`\n                      : `Updated ${timeDifferenceForDate(updatedAt)}`}\n                  </CardText>\n                </CardBody>\n              </Card>\n            </Col>\n          )\n        }}\n      </ApolloConsumer>\n    )\n  }\n}\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    _id: PropTypes.string.isRequired,\n    complete: PropTypes.bool.isRequired,\n    createdAt: PropTypes.string.isRequired,\n    updatedAt: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n  }).isRequired,\n  subscribeToTodoUpdatedText: PropTypes.func.isRequired,\n}\n\nTodo.fragments = {\n  todo: gql`\n    fragment Todo on Todo {\n      __typename\n      _id\n      complete\n      createdAt\n      updatedAt\n      text\n    }\n  `\n}\n\nexport default Todo\n\n","import React from 'react'\nimport { ApolloConsumer, Query } from 'react-apollo'\nimport { Container, Row, Alert, Button } from 'reactstrap'\nimport gql from 'graphql-tag'\nimport PropTypes from 'prop-types'\nimport Pagination from 'react-js-pagination'\nimport Loading from '../../Loading'\n\nimport Todo from './Todo'\n\nimport { VIEWER } from '../../../App'\nimport { CLIENT } from '../Home'\n\nconst TODO_UPDATED_TEXT_SUBSCRIPTION = gql`\n  subscription todoUpdatedText {\n    todoUpdatedText {\n      __typename\n        _id\n        text\n        complete\n        createdAt\n        updatedAt\n    }\n  }\n`;\n\nclass Todos extends React.Component {\n\n  componentDidMount = () => {\n    const { subscribeToNewTodos } = this.props\n    subscribeToNewTodos()\n  }\n\n  render() {\n    return (\n      <ApolloConsumer>\n        {client => (\n          <Container>\n            <Query query={CLIENT}>\n              {({\n                data: {\n                  page,\n                  sort,\n                  todosRefetching,\n                  showRefresh\n                }\n              }) => (\n                  <Query query={VIEWER}>\n                    {({\n                      data: {\n                        viewer,\n                      },\n                      loading,\n                      refetch,\n                      error,\n                      subscribeToMore\n                    }) => {\n                      const load = (todosRefetching || loading)\n                      if (error) return `Error!: ${error}`;\n                      if (!load && !viewer.todosCount && sort === 'all') {\n                        return (\n                          <Row>\n                            <Alert color=\"info\">\n                              <h5>No todos</h5>\n                            </Alert>\n                          </Row>\n                        )\n                      }\n                      if (!load && !viewer.todosCount) {\n                        return (\n                          <Alert color=\"info\">\n                            <h5 className=\"m-0\">{`No ${sort}d todos`}</h5>\n                          </Alert>\n                        )\n                      }\n\n                      return (\n                        <React.Fragment>\n                          <Row style={{ minHeight: '60vh' }}>\n                            {load ? (\n                              <div className=\"position-relative w-100\">\n                                <Loading loading={load} />\n                              </div>\n                            ) : viewer.todos.map(todo => (\n                              <Todo\n                                key={todo._id}\n                                todo={todo}\n                                subscribeToTodoUpdatedText={() => subscribeToMore({\n                                  document: TODO_UPDATED_TEXT_SUBSCRIPTION,\n                                  updateQuery: (prev, { subscriptionData }) => {\n                                    if (!subscriptionData.data) return prev;\n                                    const updatedTodoText = subscriptionData.data.todoUpdatedText;\n                                    return ({\n                                      __typename: 'Query',\n                                      viewer: {\n                                        ...viewer,\n                                        __typename: 'User',\n                                        todos: [...viewer.todos].map(t => {\n                                          if (t._id === updatedTodoText._id) {\n                                            return updatedTodoText\n                                          }\n                                          return t\n                                        }),\n                                      },\n                                    });\n                                  }\n                                })}\n                              />\n                            ))}\n                          </Row>\n                          <Row className=\"mt-2 d-flex flex-column justify-content-center align-items-center\">\n                            {showRefresh && (\n                              <Button\n                                color=\"primary\"\n                                className=\"btn-block w-25\"\n                                onClick={async () => {\n                                  await refetch({ page, sort })\n                                  client.writeData({ data: { showRefresh: false } })\n                                }}\n                              >\n                                Refresh Page\n                        </Button>\n                            )}\n                            <Pagination\n                              activePage={page}\n                              itemsCountPerPage={9}\n                              totalItemsCount={viewer.todosCount}\n                              pageRangeDisplayed={5}\n                              onChange={async (currentPage) => {\n                                client.writeData({ data: { page: currentPage } });\n                                refetch({ page: currentPage, sort })\n                              }}\n                            />\n                          </Row>\n                        </React.Fragment>\n                      )\n                    }}\n                  </Query>)}\n            </Query>\n          </Container>\n        )}\n      </ApolloConsumer>\n    )\n  }\n}\n\nTodos.propTypes = {\n  subscribeToNewTodos: PropTypes.func.isRequired,\n}\n\nexport default Todos\n","import React from 'react'\nimport { ApolloConsumer, Mutation, Query } from 'react-apollo'\nimport gql from 'graphql-tag'\nimport map from 'lodash/map'\nimport every from 'lodash/every'\nimport filter from 'lodash/filter'\nimport {\n  Container,\n  Row,\n  Col,\n  Input,\n  Button\n} from 'reactstrap'\n\nimport { VIEWER } from '../App';\nimport { CLIENT } from './Home/Home'\nimport { TOGGLE_COMPLETE } from './Home/Todos/Todo'\n\nexport const CLEAR_COMPLETED = gql`\n  mutation ClearCompleted($input: ClearCompletedInput!) {\n    __typename\n    clearCompleted(input: $input) {\n      __typename\n      clearedIds # the deleted _id\n    }\n  }\n`;\n\nconst Filter = () => (\n  <ApolloConsumer>\n    {client => (\n      <Query query={CLIENT}>\n        {({ data: { sort, page, search } }) => (\n          <Query query={VIEWER}>\n            {({ data: { viewer }, refetch, error }) => {\n              const getIdsByComplete = bool => map(\n                filter(\n                  viewer.todos,\n                  ({ complete }) => complete === bool\n                ),\n                ({ _id }) => _id\n              )\n              const allCompleted = every(\n                map(\n                  viewer.todos,\n                  ({ complete }) => complete\n                ),\n                c => c === true\n              )\n              const updateFragment = async ({ _ids, complete }) => {\n                _ids.forEach(_id => {\n                  client.writeFragment({ // we render todos on Todos component from client readQuery\n                    id: _id,\n                    fragment: gql`\n                    fragment ToggleCompleteFragment on Todo {\n                      __typename\n                      _id\n                      complete\n                      updatedAt\n                    }\n                  `,\n                    data: {\n                      __typename: 'Todo',\n                      _id,\n                      complete,\n                      updatedAt: new Date().toISOString(),\n                    },\n                  });\n                })\n              }\n              const completedIds = getIdsByComplete(true)\n              const inCompleteIds = getIdsByComplete(false)\n\n              if (error) return `Error!: ${error}`;\n\n              return (\n                <Container>\n                  <Row className=\"my-3\">\n                    <Col lg=\"2\" className=\"d-flex justify-content-center align-items-center\">\n                      Total: {viewer.todosCount}\n                    </Col>\n                    <Col lg=\"8\" className=\"filter d-flex justify-content-center align-items-center\">\n                      <div className=\"d-flex align-items-center\">\n                        <Mutation\n                          mutation={TOGGLE_COMPLETE}\n                        >\n                          {toggleComplete => (\n                            <Input\n                              onChange={async () => {\n                                const input = {}\n                                if (allCompleted) {\n                                  input._ids = completedIds\n                                  input.complete = false\n                                  updateFragment({ _ids: completedIds, complete: false })\n                                } else {\n                                  input._ids = inCompleteIds // pass as an array because we can use this mutation for multiple todos\n                                  input.complete = true // the opposite value of boolean will be set to the selected todo\n                                  updateFragment({ _ids: inCompleteIds, complete: true })\n                                }\n                                await toggleComplete({ variables: { input } }) // wait for the mutation so on refetch we get updated data\n                                if (sort !== 'all') {\n                                  client.writeData({ data: { todosRefetching: true } })\n                                  const newPage = page > 1 ? page - 1 : page\n                                  await refetch({ page: newPage, sort, search })\n                                  client.writeData({ data: { todosRefetching: false, page: newPage } })\n                                }\n                              }}\n                              disabled={!viewer.todosCount}\n                              checked={allCompleted}\n                              type=\"checkbox\"\n                              className=\"mt-0\"\n                            />\n                          )}\n                        </Mutation>\n                        {allCompleted ? 'Deselect All' : 'Select All'}\n                      </div>\n                      <div className=\"nav-container d-flex justify-content-around\">\n                        <Button\n                          size=\"md\"\n                          color=\"link\"\n                          name=\"all\"\n                          onClick={async () => {\n                            client.writeData({ data: { todosRefetching: true, showRefresh: false } })\n                            await refetch({ page: 1, sort: 'all', search })\n                            client.writeData({ data: { sort: 'all', page: 1, todosRefetching: false } })\n                          }}\n                          disabled={sort === 'all'}\n                        >\n                          All\n                      </Button>\n                        <Button\n                          size=\"md\"\n                          color=\"link\"\n                          name=\"active\" // complete = false\n                          onClick={async () => {\n                            client.writeData({ data: { todosRefetching: true, showRefresh: false } })\n                            await refetch({ page: 1, sort: 'active', search })\n                            client.writeData({ data: { sort: 'active', page: 1, todosRefetching: false } })\n                          }}\n                          disabled={sort === 'active'}\n                        >\n                          Active\n                      </Button>\n                        <Button\n                          size=\"md\"\n                          color=\"link\"\n                          name=\"complete\"\n                          onClick={async () => {\n                            client.writeData({ data: { todosRefetching: true, showRefresh: false } })\n                            await refetch({ page: 1, sort: 'complete', search })\n                            client.writeData({ data: { sort: 'complete', page: 1, todosRefetching: false } })\n                          }}\n                          disabled={sort === 'complete'}\n                        >\n                          Completed\n                      </Button>\n                      </div>\n                    </Col>\n                    <Col lg=\"2\" className=\"d-flex align-items-center justify-content-center\">\n                      <Mutation mutation={CLEAR_COMPLETED}>\n                        {clearCompleted => (\n                          <Button\n                            size=\"md\"\n                            color=\"link\"\n                            disabled={!completedIds.length}\n                            onClick={async () => {\n                              client.writeQuery({\n                                query: VIEWER,\n                                data: {\n                                  __typename: 'Query',\n                                  viewer: {\n                                    __typename: 'User',\n                                    ...viewer,\n                                    todos: viewer.todos.filter(({ _id }) => !completedIds.includes(_id)),\n                                    todosCount: viewer.todosCount - completedIds.length\n                                  }\n                                }\n                              })\n                              if (viewer.todos.length === completedIds.length) {\n                                client.writeData({ data: { todosRefetching: true } })\n                                await clearCompleted({ variables: { input: { _ids: completedIds } } })\n                                await refetch({ page, sort, search })\n                                client.writeData({ data: { todosRefetching: false, showRefresh: false } })\n                              } else {\n                                await clearCompleted({ variables: { input: { _ids: completedIds } } })\n                                client.writeData({ data: { showRefresh: true } })\n                              }\n                            }}\n                          >\n                            Clear Completed\n                        </Button>\n                        )}\n                      </Mutation>\n                    </Col>\n                  </Row>\n                </Container>\n              )\n            }}\n          </Query>\n        )}\n      </Query>\n    )}\n  </ApolloConsumer>\n)\n\nexport default Filter\n","import React from 'react'\nimport { Mutation, ApolloConsumer, Query } from 'react-apollo'\nimport gql from 'graphql-tag'\nimport {\n  Container,\n  Row,\n  Col,\n  Alert\n} from 'reactstrap'\nimport uuidv1 from 'uuid/v1';\n\nimport { AddTodo, Search } from '../Forms'\nimport Todos from './Todos';\nimport Filter from '../Filter'\n\nimport { VIEWER } from '../../App'\n\nconst ADD_TODO = gql`\n  mutation AddTodo($text: String!) {\n    __typename\n    addTodo(text: $text) {\n      __typename\n      todo {\n        __typename\n        _id\n        text\n        complete\n        createdAt\n        updatedAt\n      }\n    }\n  }\n`;\n\nexport const CLIENT = gql`\n  query Client {\n    __typename\n    page @client\n    sort @client\n    todosRefetching @client\n    showRefresh @client\n    isLoggedIn @client\n    viewerFetching @client\n    search @client\n  }\n`\n\nconst TODO_ADDED_SUBSCRIPTION = gql`\n  subscription todoAdded {\n    todoAdded {\n      __typename\n        _id\n        text\n        complete\n        createdAt\n        updatedAt\n    }\n  }\n`;\n\n\nfunction Home() {\n  return (\n    <ApolloConsumer>\n      {client => (\n        <Query query={CLIENT}>\n          {({ data: { sort } }) => (\n            <Query query={VIEWER}>\n              {({\n                data: { viewer },\n                refetch,\n                subscribeToMore\n              }) => (\n                  <React.Fragment>\n                    <Container>\n                      <Row>\n                        <Col xs=\"12\" md=\"6\">\n                          {viewer.confirmed ? (\n                            <Mutation\n                              mutation={ADD_TODO}\n                            >\n                              {mutate => (\n                                <AddTodo\n                                  submit={({ text }) => {\n                                    const now = new Date().toISOString()\n                                    const _id = uuidv1()\n                                    const mockTodo = {\n                                      __typename: \"Todo\",\n                                      _id,\n                                      text,\n                                      complete: false,\n                                      createdAt: now,\n                                      updatedAt: now,\n                                    }\n                                    if (sort !== 'complete') {\n                                      client.writeQuery({\n                                        query: VIEWER,\n                                        data: {\n                                          __typename: 'Query',\n                                          viewer: {\n                                            __typename: 'User',\n                                            ...viewer,\n                                            todos: [{ ...mockTodo }, ...viewer.todos],\n                                            todosCount: viewer.todosCount + 1\n                                          },\n                                        }\n                                      })\n                                    }\n                                    return mutate({\n                                      variables: { text },\n                                      optimisticResponse: {\n                                        __typename: \"Mutation\",\n                                        addTodo: {\n                                          __typename: \"AddTodoResponse\",\n                                          todo: { ...mockTodo }\n                                        }\n                                      },\n                                      update: (proxy, { data: { addTodo: { todo } } }) => {\n                                        const data = proxy.readQuery({ query: VIEWER })\n                                        proxy.writeQuery({\n                                          query: VIEWER,\n                                          data: {\n                                            __typename: 'Query',\n                                            viewer: {\n                                              ...data.viewer,\n                                              todos: data.viewer.todos.map(t => {\n                                                if (t._id === _id) {\n                                                  return ({ ...todo })\n                                                }\n                                                return t\n                                              }),\n                                            }\n                                          }\n                                        });\n                                      }\n                                    })\n                                  }}\n                                />\n                              )}\n                            </Mutation>\n                          ) : (\n                              <Alert className=\"text-center mx-auto mt-4 mb-xs-1 mb-md-5\" color=\"primary\">\n                                Please confirm your account to Add Todo\n                              </Alert>\n                            )}\n                        </Col>\n                        <Col xs=\"12\" md=\"6\">\n                          <Search\n                            search={async ({ text }) => {\n                              client.writeData({ data: { todosRefetching: true } })\n                              await refetch({ page: 1, search: text, sort: 'all' })\n                              client.writeData({ data: { page: 1, search: text, sort: 'all', todosRefetching: false } })\n                            }}\n                            clearText={() => {\n                              client.writeData({ data: { search: '' } })\n                            }}\n                          />\n                        </Col>\n                      </Row>\n                    </Container>\n                    <Filter />\n                    <Todos\n                      subscribeToNewTodos={() => subscribeToMore({\n                        document: TODO_ADDED_SUBSCRIPTION,\n                        updateQuery: (prev, { subscriptionData }) => {\n                          if (!subscriptionData.data) return prev;\n                          const newTodo = subscriptionData.data.todoAdded;\n                          return ({\n                            __typename: 'Query',\n                            viewer: {\n                              ...viewer,\n                              __typename: 'User',\n                              todos: [newTodo, ...viewer.todos],\n                              todosCount: viewer.todosCount + 1\n                            },\n                          });\n                        }\n                      })}\n                    />\n                  </React.Fragment>\n                )}\n            </Query>\n          )}\n        </Query>\n      )}\n    </ApolloConsumer>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport { Mutation, ApolloConsumer, Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { Alert } from 'reactstrap'\n\nimport { SignUpForm } from '../Forms'\n\nconst SIGNUP_USER = gql`\n  mutation SignUp($email: String!, $password: String!) {\n    signUp(email: $email, password: $password) {\n      error\n      email\n    }\n  }\n`;\n\nconst SIGN_UP_SUCCESS = gql`\n  query SignUpSuccess {\n    signUp @client {\n      success\n      email\n    }\n  }\n`;\n\nfunction Welcome() {\n  return (\n    <ApolloConsumer>\n      {client => (\n          <React.Fragment>\n            <Query query={SIGN_UP_SUCCESS}>\n              {({ data: { signUp } }) => signUp.success && (\n                <Alert\n                  color=\"success\"\n                  className=\"mx-auto text-center w-75 my-5\"\n                  isOpen={signUp.success}\n                  toggle={() => client.writeData({\n                    data: { signUp: { __typename: 'SignUpState', success: false, email: '' } }\n                  })}\n                >\n                  <h5>{`Success! A confirmation link has been sent to ${signUp.email}`}</h5>\n                </Alert>\n              )}\n            </Query>\n            <Mutation\n              mutation={SIGNUP_USER}\n              onCompleted={({ signUp }) => {\n                if (signUp.error === null) {\n                  client.writeData({\n                    data: { signUp: { __typename: 'SignUpState', success: true, email: signUp.email } }\n                  });\n                }\n              }}\n            >\n              {(signUp, attr = {}) => {\n                if (attr.error) return <p>An error occurred</p>;\n                return <SignUpForm {...attr} signUp={signUp} />\n              }}\n            </Mutation>\n          </React.Fragment>\n        )}\n    </ApolloConsumer>\n  )\n}\n\nexport default Welcome","import React from 'react'\n\nfunction Confirmation() {\n  return (\n    <div>\n      Confirmation\n    </div>\n  )\n}\n\nexport default Confirmation\n","import React, { Component, Fragment } from 'react'\nimport { Mutation, ApolloConsumer, Query } from 'react-apollo'\nimport gql from 'graphql-tag';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  Container,\n  Button\n} from 'reactstrap';\n\nimport { LogInForm } from '../Forms'\nimport { VIEWER } from '../../App';\nimport { CLIENT } from '../Home/Home';\n\nconst LOGIN_USER = gql`\n  mutation LogIn($email: String!, $password: String!) {\n    logIn(email: $email, password: $password) {\n      error {\n        email\n        password\n      }\n      token\n    }\n  }\n`;\n\nclass Header extends Component {\n\n  state = {\n    isOpen: false\n  };\n\n  toggle = () => {\n    this.setState(state => ({\n      isOpen: !state.isOpen\n    }));\n  }\n\n  render() {\n    const { isOpen } = this.state\n    return (\n      <ApolloConsumer>\n        {client => (\n          <Query query={CLIENT}>\n            {({ data: { viewerFetching } }) => (<Query query={VIEWER}>\n              {({ data: { viewer } }) => <Navbar\n                style={{ borderBottom: '1px solid rgba(0,0,0,.125)' }}\n                color=\"light\"\n                light\n                expand=\"lg\"\n              >\n                <Container className=\"my-2\">\n                  <NavbarBrand href=\"/\">Glendon Philipp Baculio</NavbarBrand>\n                  <NavbarToggler onClick={this.toggle} />\n                  <Collapse isOpen={isOpen} navbar>\n                    <Nav className=\"ml-auto\" navbar>\n                      {viewer ? (\n                        <Fragment>\n                          <NavItem>\n                            {viewer.email}\n                          </NavItem>\n                          <NavItem>\n                            <Button\n                              size=\"sm\"\n                              color=\"primary\"\n                              className=\"ml-2\"\n                              onClick={() => {\n                                client.writeQuery({\n                                  query: VIEWER,\n                                  data: {\n                                    __typename: 'User',\n                                    viewer: null\n                                  }\n                                })\n                                localStorage.clear();\n                              }}\n                            >\n                              Logout\n                            </Button>\n                          </NavItem>\n                        </Fragment>\n                      ) : (\n                          <Mutation\n                            mutation={LOGIN_USER}\n                            onCompleted={async ({ logIn: { token, error } }) => {\n                              if (error === null) {\n                                localStorage.setItem('token', token)\n                              }\n                            }}\n                          >\n                            {(logIn, attr = {}) => {\n                              if (attr.error) return <p>An error occurred</p>;\n\n                              const fetchUser = async (token) => {\n                                client.writeData({\n                                  data: { viewerFetching: true }\n                                })\n                                await client.query({ // ONLY viewer data, no client field included\n                                  query: VIEWER,\n                                  fetchPolicy: 'network-only',\n                                  context: {\n                                    headers: {\n                                      \"authorization\": token\n                                    }\n                                  },\n                                })\n                                client.writeData({\n                                  data: { viewerFetching: false }\n                                })\n                              }\n\n                              return (\n                                <NavItem className=\"login-container\">\n                                  <LogInForm viewerFetching={viewerFetching} fetchUser={fetchUser} {...attr} logIn={logIn} />\n                                </NavItem>\n                              )\n                            }}\n                          </Mutation>\n                        )}\n                    </Nav>\n                  </Collapse>\n                </Container>\n              </Navbar>}\n            </Query>\n            )}\n          </Query>\n        )}\n      </ApolloConsumer>\n    )\n  }\n}\n\nexport default Header\n","import React, { Fragment } from 'react'\nimport { Router } from '@reach/router';\nimport { Query } from 'react-apollo'\nimport gql from 'graphql-tag';\n\nimport {\n  Home,\n  Welcome,\n  Confirmation,\n  Header,\n  Loading\n} from './components'\n\nimport Todo from './components/Home/Todos/Todo'\n\nexport const VIEWER = gql`\n  query Viewer($page: Int, $sort: String, $search: String ) {\n    __typename\n    viewer(page: $page, sort:$sort, search:$search) {\n      __typename\n      id\n      email\n      confirmed\n      todos {\n        __typename\n        ...Todo\n      }\n      todosCount\n    }\n  }\n  ${Todo.fragments.todo}\n`\n\nfunction App() {\n  return (\n    <Query query={VIEWER}>\n      {({ data: { viewer }, loading }) => {\n        if (loading) {\n          return <Loading loading={loading} />\n        }\n        return (\n          <Fragment>\n            <Header />\n            {viewer ? (\n              <Router primary={false} component={Fragment}>\n                <Home path=\"/\" />\n              </Router>\n            ) : (\n                <Router primary={false} component={Fragment}>\n                  <Welcome path=\"/\" />\n                  <Confirmation path=\"/confirmation/:token\" />\n                </Router>\n              )}\n          </Fragment>\n        )\n      }}\n    </Query>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache, defaultDataIdFromObject } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from 'react-apollo';\nimport { split } from 'apollo-link';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\n\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App'\n\nconst token = localStorage.getItem('token')\n\nconst cache = new InMemoryCache({\n  dataIdFromObject: object => {\n    switch (object.__typename) {\n      case 'Todo': return object._id; // use `_id` as the primary key\n      default: return defaultDataIdFromObject(object); // fall back to default handling\n    }\n  }\n});\n\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:8000/graphql',\n  headers: {\n    authorization: token,\n  },\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: 'ws://localhost:8000/graphql',\n  options: {\n    reconnect: true,\n    connectionParams: () => ({ token }),\n  }\n});\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query);\n    return kind === 'OperationDefinition' && operation === 'subscription';\n  },\n  wsLink,\n  httpLink,\n);\n\nconst client = new ApolloClient({\n  cache,\n  link,\n  initializers: {\n    isLoggedIn: () => false,\n    signUp: () => ({\n      __typename: 'SignUpState',\n      success: false,\n      email: ''\n    }),\n    currentUser: () => ({\n      __typename: 'CurrentUser',\n      email: '',\n      token,\n      confirmed: false,\n      id: '',\n    }),\n    pagination: () => ({\n      __typename: 'Pagination',\n      activePage: 1,\n      todosCount: 0\n    }),\n    todosRefetching: () => false,\n    page: () => 1,\n    sort: () => 'all',\n    showRefresh: () => false,\n    viewerFetching: () => false,\n    search: () => ''\n  },\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App style={{ height: '100%', width: '100%' }} />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}